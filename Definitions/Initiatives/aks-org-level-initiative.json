{
  "name": "AKS Org Level Initiative",
  "properties": {
    "displayName": "AKS Org Level Initiative",
    "description": "This initiative contains the necessary org level initiatives for Azure Kubernetes Service",
    "metadata": {
      "version": "1.0.0",
      "category": "Kubernetes"
    },
    "policyDefinitionGroups": [
      {
        "name": "Azure_Security_Benchmark_v2.0_NS-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_NS-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_NS-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_NS-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_NS-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_NS-6",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-6"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_NS-7",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-7"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IM-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IM-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IM-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IM-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IM-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IM-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IM-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IM-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IM-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IM-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IM-6",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IM-6"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IM-7",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IM-7"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IM-8",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IM-8"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PA-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PA-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PA-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PA-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PA-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PA-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PA-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PA-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PA-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PA-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PA-6",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PA-6"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PA-7",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PA-7"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PA-8",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PA-8"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_DP-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_DP-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_DP-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_DP-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_DP-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_DP-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_DP-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_DP-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_DP-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_DP-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_AM-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_AM-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_AM-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_AM-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_AM-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_AM-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_AM-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_AM-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_AM-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_AM-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_AM-6",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_AM-6"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_LT-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_LT-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_LT-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_LT-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_LT-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_LT-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_LT-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_LT-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_LT-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_LT-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_LT-6",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_LT-6"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_LT-7",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_LT-7"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IR-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IR-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IR-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IR-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IR-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IR-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IR-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IR-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IR-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IR-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_IR-6",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_IR-6"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PV-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PV-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PV-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PV-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PV-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PV-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PV-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PV-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PV-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PV-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PV-6",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PV-6"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PV-7",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PV-7"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_PV-8",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_PV-8"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_ES-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_ES-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_ES-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_ES-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_ES-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_ES-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_BR-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_BR-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_BR-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_BR-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_BR-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_BR-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_BR-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_BR-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_GS-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_GS-1"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_GS-2",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_GS-2"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_GS-3",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_GS-3"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_GS-4",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_GS-4"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_GS-5",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_GS-5"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_GS-6",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_GS-6"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_GS-7",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_GS-7"
      },
      {
        "name": "Azure_Security_Benchmark_v2.0_GS-8",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_GS-8"
      }
    ],
    "parameters": {
      "effect-Authorized IP ranges should be defined on Kubernetes Services": {
        "type": "String",
        "defaultValue": "Audit",
        "allowedValues": [
          "Audit",
          "Disabled"
        ],
        "metadata": {
          "displayName": "Authorized IP ranges should be defined on Kubernetes Services",
          "description": "Restrict access to the Kubernetes Service Management API by granting API access only to IP addresses in specific ranges. It is recommended to limit access to authorized IP ranges to ensure that only applications from allowed networks can access the cluster."
        }
      },
      "effect-Azure Kubernetes Service Private Clusters should be enabled": {
        "type": "String",
        "defaultValue": "Audit",
        "allowedValues": [
          "Audit",
          "Deny",
          "Disabled"
        ],
        "metadata": {
          "displayName": "Azure Kubernetes Service Private Clusters should be enabled",
          "description": "Enable the private cluster feature for your Azure Kubernetes Service cluster to ensure network traffic between your API server and your node pools remains on the private network only. This is a common requirement in many regulatory and industry compliance standards."
        }
      },
      "effect-Kubernetes clusters should use internal load balancers": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created, but flags it as non-compliant. 'Deny' blocks the resource creation. 'Disable' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes clusters should use internal load balancers": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes clusters should use internal load balancers": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes clusters should use internal load balancers": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "effect-Kubernetes clusters should not use the default namespace": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created or updated, but flags it as non-compliant. 'Deny' blocks the non-compliant resource creation or update. 'Disabled' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes clusters should not use the default namespace": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes clusters should not use the default namespace": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes clusters should not use the default namespace": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "effect-Kubernetes cluster containers should not share host process ID or host IPC namespace": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created or updated, but flags it as non-compliant. 'Deny' blocks the non-compliant resource creation or update. 'Disabled' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes cluster containers should not share host process ID or host IPC namespace": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes cluster containers should not share host process ID or host IPC namespace": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes cluster containers should not share host process ID or host IPC namespace": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "effect-Kubernetes cluster should not allow privileged containers": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created, but flags it as non-compliant. 'Deny' blocks the resource creation. 'Disable' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes cluster should not allow privileged containers": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes cluster should not allow privileged containers": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes cluster should not allow privileged containers": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "excludedContainers-Kubernetes cluster should not allow privileged containers": {
        "type": "Array",
        "metadata": {
          "displayName": "Containers exclusions",
          "description": "The list of InitContainers and Containers to exclude from policy evaluation. The identify is the name of container. Use an empty list to apply this policy to all containers in all namespaces."
        },
        "defaultValue": []
      },
      "effect-Kubernetes clusters should not allow container privilege escalation": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created or updated, but flags it as non-compliant. 'Deny' blocks the non-compliant resource creation or update. 'Disabled' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes clusters should not allow container privilege escalation": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes clusters should not allow container privilege escalation": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes clusters should not allow container privilege escalation": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "effect-Kubernetes cluster containers should run with a read only root file system": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created or updated, but flags it as non-compliant. 'Deny' blocks the non-compliant resource creation or update. 'Disabled' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes cluster containers should run with a read only root file system": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes cluster containers should run with a read only root file system": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes cluster containers should run with a read only root file system": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "effect-Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created or updated, but flags it as non-compliant. 'Deny' blocks the non-compliant resource creation or update. 'Disabled' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "effect-Kubernetes clusters should be accessible only over HTTPS": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created, but flags it as non-compliant. 'Deny' blocks the resource creation. 'Disable' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes clusters should be accessible only over HTTPS": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes clusters should be accessible only over HTTPS": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes clusters should be accessible only over HTTPS": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "effect-Role-Based Access Control (RBAC) should be used on Kubernetes Services": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created or updated, but flags it as non-compliant. 'Deny' blocks the non-compliant resource creation or update. 'Disabled' turns off the policy."
        },
        "allowedValues": [
          "Audit",
          "Disabled"
        ],
        "defaultValue": "Audit"
      },
      "effect-Temp disks and cache for agent node pools in Azure Kubernetes Service clusters should be encrypted at host": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created or updated, but flags it as non-compliant. 'Deny' blocks the non-compliant resource creation or update. 'Disabled' turns off the policy."
        },
        "allowedValues": [
          "Audit",
          "Deny",
          "Disabled"
        ],
        "defaultValue": "Audit"
      },
      "effect-Both operating systems and data disks in Azure Kubernetes Service clusters should be encrypted by customer-managed keys": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created or updated, but flags it as non-compliant. 'Deny' blocks the non-compliant resource creation or update. 'Disabled' turns off the policy."
        },
        "allowedValues": [
          "Audit",
          "Deny",
          "Disabled"
        ],
        "defaultValue": "Audit"
      },
      "effect-Kubernetes cluster containers should only use allowed images": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "'Audit' allows a non-compliant resource to be created, but flags it as non-compliant. 'Deny' blocks the resource creation. 'Disable' turns off the policy."
        },
        "allowedValues": [
          "audit",
          "deny",
          "disabled"
        ],
        "defaultValue": "audit"
      },
      "excludedNamespaces-Kubernetes cluster containers should only use allowed images": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace exclusions",
          "description": "List of Kubernetes namespaces to exclude from policy evaluation."
        },
        "defaultValue": [
          "kube-system",
          "gatekeeper-system",
          "azure-arc"
        ]
      },
      "namespaces-Kubernetes cluster containers should only use allowed images": {
        "type": "Array",
        "metadata": {
          "displayName": "Namespace inclusions",
          "description": "List of Kubernetes namespaces to only include in policy evaluation. An empty list means the policy is applied to all resources in all namespaces."
        },
        "defaultValue": []
      },
      "labelSelector-Kubernetes cluster containers should only use allowed images": {
        "type": "Object",
        "metadata": {
          "displayName": "Kubernetes label selector",
          "description": "Label query to select Kubernetes resources for policy evaluation. An empty label selector matches all Kubernetes resources."
        },
        "defaultValue": {},
        "schema": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all resources.",
          "type": "object",
          "properties": {
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            },
            "matchExpressions": {
              "description": "matchExpressions is a list of values, a key, and an operator.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.",
                    "type": "string",
                    "enum": [
                      "In",
                      "NotIn",
                      "Exists",
                      "DoesNotExist"
                    ]
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "additionalProperties": false
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      },
      "allowedContainerImagesRegex-Kubernetes cluster containers should only use allowed images": {
        "type": "String",
        "defaultValue": "^(.+){0}$",
        "metadata": {
          "displayName": "Allowed container images regex",
          "description": "The RegEx rule used to match allowed container images in a Kubernetes cluster. For example, to allow any Azure Container Registry image by matching partial path: ^.+azurecr.io/.+$"
        }
      }
    },
    "PolicyDefinitions": [
      {
        "policyDefinitionReferenceId": "Authorized IP ranges should be defined on Kubernetes Services",
        "policyDefinitionName": "0e246bcf-5f6f-4f87-bc6f-775d4712c7ea",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Authorized IP ranges should be defined on Kubernetes Services')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_NS-1",
          "Azure_Security_Benchmark_v2.0_NS-4"
        ]
      },
      {
        "policyDefinitionReferenceId": "Azure Kubernetes Service Private Clusters should be enabled",
        "policyDefinitionName": "040732e8-d947-40b8-95d6-854c95024bf8",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Azure Kubernetes Service Private Clusters should be enabled')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes clusters should use internal load balancers",
        "policyDefinitionName": "3fc4dc25-5baf-40d8-9b05-7fe74c1bc64e",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes clusters should use internal load balancers')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes clusters should use internal load balancers')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes clusters should use internal load balancers')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes clusters should use internal load balancers')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes clusters should not use the default namespace",
        "policyDefinitionName": "9f061a12-e40d-4183-a00e-171812443373",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes clusters should not use the default namespace')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes clusters should not use the default namespace')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes clusters should not use the default namespace')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes clusters should not use the default namespace')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes cluster containers should not share host process ID or host IPC namespace",
        "policyDefinitionName": "47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes cluster containers should not share host process ID or host IPC namespace')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes cluster containers should not share host process ID or host IPC namespace')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes cluster containers should not share host process ID or host IPC namespace')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes cluster containers should not share host process ID or host IPC namespace')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes cluster should not allow privileged containers",
        "policyDefinitionName": "95edb821-ddaf-4404-9732-666045e056b4",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes cluster should not allow privileged containers')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes cluster should not allow privileged containers')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes cluster should not allow privileged containers')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes cluster should not allow privileged containers')]"
          },
          "excludedContainers": {
            "value": "[parameters('excludedContainers-Kubernetes cluster should not allow privileged containers')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes clusters should not allow container privilege escalation",
        "policyDefinitionName": "1c6e92c9-99f0-4e55-9cf2-0c234dc48f99",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes clusters should not allow container privilege escalation')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes clusters should not allow container privilege escalation')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes clusters should not allow container privilege escalation')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes clusters should not allow container privilege escalation')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes cluster containers should run with a read only root file system",
        "policyDefinitionName": "df49d893-a74c-421d-bc95-c663042e5b80",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes cluster containers should run with a read only root file system')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes cluster containers should run with a read only root file system')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes cluster containers should run with a read only root file system')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes cluster containers should run with a read only root file system')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities",
        "policyDefinitionName": "d2e7ea85-6b44-4317-a0be-1b951587f626",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes clusters should not grant CAP_SYS_ADMIN security capabilities')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes clusters should be accessible only over HTTPS",
        "policyDefinitionName": "1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes clusters should be accessible only over HTTPS')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes clusters should be accessible only over HTTPS')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes clusters should be accessible only over HTTPS')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes clusters should be accessible only over HTTPS')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_DP-4"
        ]
      },
      {
        "policyDefinitionReferenceId": "Role-Based Access Control (RBAC) should be used on Kubernetes Services",
        "policyDefinitionName": "ac4a19c2-fa67-49b4-8ae5-0b2e78c49457",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Role-Based Access Control (RBAC) should be used on Kubernetes Services')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PA-7"
        ]
      },
      {
        "policyDefinitionReferenceId": "Temp disks and cache for agent node pools in Azure Kubernetes Service clusters should be encrypted at host",
        "policyDefinitionName": "41425d9f-d1a5-499a-9932-f8ed8453932c",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Temp disks and cache for agent node pools in Azure Kubernetes Service clusters should be encrypted at host')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Both operating systems and data disks in Azure Kubernetes Service clusters should be encrypted by customer-managed keys",
        "policyDefinitionName": "7d7be79c-23ba-4033-84dd-45e2a5ccdd67",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Both operating systems and data disks in Azure Kubernetes Service clusters should be encrypted by customer-managed keys')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      },
      {
        "policyDefinitionReferenceId": "Kubernetes cluster containers should only use allowed images",
        "policyDefinitionName": "febd0533-8e55-448f-b837-bd0e06f16469",
        "parameters": {
          "effect": {
            "value": "[parameters('effect-Kubernetes cluster containers should only use allowed images')]"
          },
          "excludedNamespaces": {
            "value": "[parameters('excludedNamespaces-Kubernetes cluster containers should only use allowed images')]"
          },
          "namespaces": {
            "value": "[parameters('namespaces-Kubernetes cluster containers should only use allowed images')]"
          },
          "labelSelector": {
            "value": "[parameters('labelSelector-Kubernetes cluster containers should only use allowed images')]"
          },
          "allowedContainerImagesRegex": {
            "value": "[parameters('allowedContainerImagesRegex-Kubernetes cluster containers should only use allowed images')]"
          }
        },
        "groupNames": [
          "Azure_Security_Benchmark_v2.0_PV-2"
        ]
      }
    ]
  }
}