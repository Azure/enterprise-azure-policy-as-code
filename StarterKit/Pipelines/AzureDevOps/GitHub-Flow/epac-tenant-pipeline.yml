variables:
  # This pipeline is used to deploy Policies, Initiative definitions and Assignments into Azure.
  PAC_OUTPUT_FOLDER: ./Output
  PAC_DEFINITIONS_FOLDER: ./Definitions

  # Use the plain text name of each service connection as a reference
  planServiceConnection: "sc-epac-plan"
  deployServiceConnection: "sc-epac-tenant-deploy"
  rolesServiceConnection: "sc-epac-tenant-roles"
  
  # set the environment selector
  pacEnvironmentSelector: tenant

# what to build trigger
trigger: none
pr: none

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Plan
    displayName: "Plan ${{ variables.pacEnvironmentSelector }}"
    jobs:
      - job: Plan
        steps:
          - template: templates/plan.yml
            parameters:
              serviceConnection: $(planServiceConnection)
              pacEnvironmentSelector: ${{ variables.pacEnvironmentSelector }}

  - stage: Deploy
    displayName: "Deploy ${{ variables.pacEnvironmentSelector }}"
    dependsOn: Plan
    condition: and(not(failed()), not(canceled()), or(eq(dependencies.Plan.outputs['Plan.Plan.deployPolicyChanges'], 'yes'), eq(dependencies.Plan.outputs['Plan.Plan.deployRoleChanges'], 'yes')), contains(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      PAC_INPUT_FOLDER: "$(Pipeline.Workspace)/plans-${{ variables.pacEnvironmentSelector }}"
      localDeployPolicyChanges: $[stageDependencies.Plan.Plan.outputs['Plan.deployPolicyChanges']]
      localDeployRoleChanges: $[stageDependencies.Plan.Plan.outputs['Plan.deployRoleChanges']]
    jobs:
      - deployment: DeployPolicy
        displayName: "Deploy Policy Changes"
        environment: PAC-POLICY
        condition: and(not(failed()), not(canceled()), eq(variables.localDeployPolicyChanges, 'yes'))
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-policy.yml
                  parameters:
                    serviceConnection: $(deployServiceConnection)
                    pacEnvironmentSelector: ${{ variables.pacEnvironmentSelector }}
      - deployment: DeployRoles
        displayName: "Deploy Role Changes"
        dependsOn: DeployPolicy
        environment: PAC-POLICY
        condition: and(not(failed()), not(canceled()), eq(variables.localDeployRoleChanges, 'yes'))
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-roles.yml
                  parameters:
                    serviceConnection: $(rolesServiceConnection)
                    pacEnvironmentSelector: ${{ variables.pacEnvironmentSelector }}

