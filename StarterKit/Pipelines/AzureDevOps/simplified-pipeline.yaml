# Note - Create an Azure DevOps pipeline environment for the DeployPolicy and DeployRoles stage - it can be the same environment as depicted below. It depends on how you manage approvals for stages etc.

trigger: none

variables:
  PAC_OUTPUT_FOLDER: ./Output
  environment: contoso # Specify the PAC environment here
  serviceConnection: example-service-connection # This is the name of the service connection which has permission in Azure

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Plan
    displayName: Plan Deployment
    jobs:
      - job: Plan
        steps:
          - template: templates/build.yaml
            parameters:
              serviceConnection: $(serviceConnection)
              pacEnvironment: $(environment)
  - stage: DeployPolicy
    displayName: Deploy Policy Changes
    condition: and(succeeded(), eq(dependencies.Plan.outputs['Plan.Plan.deployPolicyChanges'], 'yes'))
    jobs:
      - deployment:
        environment: Deploy
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy.yaml
                  parameters:
                    serviceConnection: $(serviceConnection)
                    pacEnvironment: $(environment)
  - stage: DeployRoles
    displayName: Deploy Role Changes
    condition: and(succeeded(), eq(dependencies.Plan.outputs['Plan.Plan.deployRoleChanges'], 'yes'))
    jobs:
      - deployment:
        environment: Deploy
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/rbac.yaml
                  parameters:
                    serviceConnection: $(serviceConnection)
                    pacEnvironment: $(environment)
